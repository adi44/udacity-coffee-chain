// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
const SupplyChain = artifacts.require('SupplyChain');

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1;
    var upc = 1;
    const ownerID = accounts[0];
    const originFarmerID = accounts[1];
    const originFarmName = "John Doe";
    const originFarmInformation = "Yarray Valley";
    const originFarmLatitude = "-38.239770";
    const originFarmLongitude = "144.341490";
    var productID = sku + upc;
    const productNotes = "Best beans for Espresso";
    const productPrice = '1000000000000000000';
    var itemState = 0;
    const distributorID = accounts[2];
    const retailerID = accounts[3];
    const consumerID = accounts[4];
    const emptyAddress = '0x00000000000000000000000000000000000000';

    // Available Accounts from Ganache-CLI
    // ==================
    // (0) 0x6b20985c54405e7ac1b26fc0f27bace6f6e7d821 (~100 ETH)
    // (1) 0x346f7e161dc1e916e0cfa1270cff57c6f8ccd398 (~100 ETH)
    // (2) 0xdb7663a8a7f7b688fe684f6df24d80fb2b7e6599 (~100 ETH)
    // (3) 0x7820c939dd72a7188fcb1440e4e4e8d988dc1a8e (~100 ETH)
    // (4) 0x55b3218fc15150bb9b61ccaf81c46a0fdcb8d825 (~100 ETH)
    // (5) 0x59498fb03516ef534bff3adb58bb8d9427f70b92 (~100 ETH)
    // (6) 0x25465c9aed953cc3c6df1b3abf7cb34dbcf003bb (~100 ETH)
    // (7) 0x29d95cbf7990605eff3d4e968f030c804e6510c6 (~100 ETH)
    // (8) 0xbdd0a302e2a24aae707901b910ac851181df3526 (~100 ETH)
    // (9) 0x547101c6d9c71dfd4175e9cbed26b8e5d58cef63 (~100 ETH)


    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed();

        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes);

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        assert.equal(resultBufferOne[0], sku, 'Wrong item SKU');
        assert.equal(resultBufferOne[1], upc, 'Wrong UPC');
        assert.equal(resultBufferOne[2], originFarmerID, 'Wrong ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Wrong originFarmerID');
        assert.equal(resultBufferOne[4], originFarmName, 'Wrong originFarmName');
        assert.equal(resultBufferOne[5], originFarmInformation, 'Wrong originFarmInformation');
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Wrong originFarmLatitude');
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Wrong originFarmLongitude');
        assert.equal(resultBufferTwo[5], 0, 'The State of the coffee Item is wrong...');
    })

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        const supplyChain = await SupplyChain.deployed();

        await supplyChain.processItem(upc, {from: originFarmerID});
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        assert.equal(resultBufferTwo[5], 1, 'Wrong State');
    })

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed();

        await supplyChain.packItem(upc, {from: originFarmerID});
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        assert.equal(resultBufferTwo[5], 2, "Wrong State");
    })

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed();

        await supplyChain.sellItem(upc, productPrice, {from: originFarmerID});

        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        assert.equal(resultBufferTwo[4], productPrice, 'Wrong Price');
        assert.equal(resultBufferTwo[5], 3, 'Wrong coffee Item State');
    })

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed();

        await supplyChain.addDistributor(distributorID);
        await supplyChain.buyItem(upc, {from: distributorID, value: productPrice});

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        assert.equal(resultBufferOne[2], distributorID, 'Wrong Owner');
        assert.equal(resultBufferTwo[4], productPrice, 'Wrong Price');
        assert.equal(resultBufferTwo[5], 4, 'Wrong State');
    })

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        await supplyChain.shipItem(upc, {from: distributorID});

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        assert.equal(resultBufferOne[2], distributorID, 'Wrong Owner');
        assert.equal(resultBufferTwo[6], distributorID, 'Wrong Owner');
        assert.equal(resultBufferTwo[5], 5, 'Wrong State');
    })

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()

        await supplyChain.addRetailer(retailerID);
        await supplyChain.receiveItem(upc, {from: retailerID});

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        assert.equal(resultBufferOne[2], retailerID, 'Wrong Owner');
        assert.equal(resultBufferTwo[7], retailerID, 'Wrong Owner');
        assert.equal(resultBufferTwo[5], 6, 'Wrong State');
    })

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        await supplyChain.addConsumer(consumerID);
        await supplyChain.purchaseItem(upc, {from: consumerID});

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        assert.equal(resultBufferOne[2], consumerID, 'Wrong Owner');
        assert.equal(resultBufferTwo[8], consumerID, 'Wrong Owner');
        assert.equal(resultBufferTwo[5], 7, 'Wrong State');
    })

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);

        assert.equal(resultBufferOne[0], sku, 'Wrong SKU');
        assert.equal(resultBufferOne[1], upc, 'Wrong UPC');
        assert.equal(resultBufferOne[2], consumerID, 'wrong consumer ID');
        assert.equal(resultBufferOne[3], originFarmerID, 'wrong originFarmerID');
        assert.equal(resultBufferOne[4], originFarmName, 'wrong originFarmName');
        assert.equal(resultBufferOne[5], originFarmInformation, 'wrong originFarmInformation');
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Wrong originFarmLatitude');
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Wrong originFarmLongitude');
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        assert.equal(resultBufferTwo[0], sku, 'Wrong SKU');
        assert.equal(resultBufferTwo[1], upc, 'Wrong UPC');
        assert.equal(resultBufferTwo[2], productID, 'Wrong productID');
        assert.equal(resultBufferTwo[3], productNotes, 'Wrong product notes');
        assert.equal(resultBufferTwo[4], productPrice, 'wrong price');
        assert.equal(resultBufferTwo[5], 7, 'wrong state');
        assert.equal(resultBufferTwo[6], distributorID, 'wrong distributorID');
        assert.equal(resultBufferTwo[7], retailerID, 'Wrong retailerID');
        assert.equal(resultBufferTwo[8], consumerID, 'Wrong consumerID');
    })
});